# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../intell_voice_service.gni")

ohos_source_set("engine_source") {
  configs = [ "//build/config/compiler:exceptions" ]
  if (intelligent_voice_framework_engine_enable) {
    sources = [
      "server/base/adapter_callback_service.cpp",
      "server/base/audio_debug.cpp",
      "server/base/audio_source.cpp",
      "server/base/data_operation_callback.cpp",
      "server/base/engine_base.cpp",
      "server/base/engine_factory.cpp",
      "server/base/engine_util.cpp",
      "server/base/file_source.cpp",
      "server/base/intell_voice_engine_callback_proxy.cpp",
      "server/base/intell_voice_engine_stub.cpp",
      "server/base/intell_voice_sensibility.cpp",
      "server/base/intell_voice_update_callback_proxy.cpp",
      "server/base/swing_service_wrapper.cpp",
      "server/enroll/enroll_adapter_listener.cpp",
      "server/enroll/enroll_engine.cpp",
      "server/hdi_adapter/adapter_host_manager.cpp",
      "server/hdi_adapter/engine_host_manager.cpp",
      "server/hdi_adapter/headset_adapter_host_manager.cpp",
      "server/hdi_adapter/headset_host_manager.cpp",
      "server/manager/engine_callback_message.cpp",
      "server/manager/intell_voice_engine_arbitration.cpp",
      "server/manager/intell_voice_engine_manager.cpp",
      "server/update/controller/strategy/clone_update_strategy.cpp",
      "server/update/controller/strategy/silence_update_strategy.cpp",
      "server/update/controller/strategy/whisper_update_strategy.cpp",
      "server/update/controller/update_engine_controller.cpp",
      "server/update/update_adapter_listener.cpp",
      "server/update/update_engine.cpp",
      "server/update/update_engine_utils.cpp",
      "server/wakeup/headset/headset_wakeup_engine_impl.cpp",
      "server/wakeup/headset/headset_wakeup_wrapper.cpp",
      "server/wakeup/wakeup_adapter_listener.cpp",
      "server/wakeup/wakeup_engine.cpp",
      "server/wakeup/wakeup_engine_impl.cpp",
      "server/wakeup/wakeup_source_process.cpp",
      "server/wakeup/wakeup_source_stop_callback.cpp",
    ]

    if (intelligent_voice_framework_only_second_stage) {
      sources += [
        "server/wakeup/high_power/high_power_adapter_listener.cpp",
        "server/wakeup/high_power/high_power_wakeup_engine.cpp",
      ]
    }

    include_dirs = [
      "inc",
      "../../../../ai/intelligent_voice_framework/utils",
      "../../../../ai/intelligent_voice_framework/interfaces/inner_api/native",
      "../intell_voice_service/inc",
      "intell_voice_engine",
      "server/base",
      "server/enroll",
      "server/hdi_adapter",
      "server/update",
      "server/update/controller",
      "server/update/controller/strategy",
      "server/utils",
      "server/wakeup",
      "server/wakeup/headset",
      "server/wakeup/high_power",
    ]

    external_deps = [
      "ability_runtime:ability_manager",
      "audio_framework:audio_capturer",
      "audio_framework:audio_client",
      "audio_framework:audio_foundation",
      "c_utils:utils",
      "drivers_interface_intelligent_voice:libintell_voice_engine_proxy_1.0",
      "drivers_interface_intelligent_voice:libintell_voice_engine_proxy_1.1",
      "drivers_interface_intelligent_voice:libintell_voice_engine_proxy_1.2",
      "eventhandler:libeventhandler",
      "ffrt:libffrt",
      "hdf_core:libhdi",
      "hilog:libhilog",
      "huks:libhukssdk",
      "image_framework:image_native",
      "ipc:ipc_core",
      "jsoncpp:jsoncpp",
      "kv_store:distributeddata_inner",
      "safwk:system_ability_fwk",
      "samgr:samgr_proxy",
    ]
  } else {
    sources = [
      "server/manager/dummy_engine_manager.cpp",
      "server/manager/engine_callback_message.cpp",
    ]
    include_dirs = [
      "inc",
      "../intell_voice_service/inc",
      "../../../../ai/intelligent_voice_framework/utils",
    ]
    external_deps = []
  }

  cflags_cc = [
    "-Wno-error=unused-parameter",
    "-DHILOG_ENABLE",
    "-DENABLE_DEBUG",
    "-DUSE_FFRT",
  ]

  if (intelligent_voice_framework_only_second_stage) {
    cflags_cc += [ "-DONLY_SECOND_STAGE" ]
  }

  defines = []
  if (build_variant == "root") {
    defines += [ "INTELL_VOICE_BUILD_VARIANT_ROOT" ]
  }

  deps = [ "../../utils:intell_voice_utils" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  branch_protector_ret = "pac_ret"
  subsystem_name = "ai"
  part_name = "intelligent_voice_framework"
}

ohos_shared_library("intelligentvoice_engine") {
  deps = [ ":engine_source" ]
  external_deps = [ "hilog:libhilog" ]
  if (intelligent_voice_framework_engine_enable) {
    version_script = "libintelligentvoice_engine.versionscript"
  } else {
    version_script = "libintelligentvoice_dummy_engine.versionscript"
  }
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  branch_protector_ret = "pac_ret"
  subsystem_name = "ai"
  part_name = "intelligent_voice_framework"
}

ohos_shared_library("intelligentvoice_engine_test") {
  deps = [ ":engine_source" ]
  external_deps = [ "hilog:libhilog" ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  branch_protector_ret = "pac_ret"
  subsystem_name = "ai"
  part_name = "intelligent_voice_framework"
}
